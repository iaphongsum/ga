-- data set is google_analytics_sample > ga_sessions_ for ecomm 
-- first query

SELECT
date,
channelGrouping as channel,
totals.visits,
totals.transactions,
totals.transactionRevenue
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
WHERE totals.transactions IS NOT NULL
LIMIT 1000

-- 2nd query WHERE xxx in (OO, OO)

SELECT
date,
channelGrouping as channel,
totals.visits,
totals.transactions,
totals.transactionRevenue
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
WHERE channelGrouping in ('Organic Search', 'Direct')
ORDER BY transactionRevenue DESC
LIMIT 1000

-- standard query on google analytics - ecomm

SELECT 
date,
channelGrouping as channel,
sum(totals.visits) as visits,
sum(totals.transactions) as transactions,
sum(totals.transactionRevenue) as revenue
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
WHERE channelGrouping in ('Organic Search','Direct')
GROUP BY date, channel
ORDER BY transactions DESC
LIMIT 1000

-- Using math + CASE statements in BigQuery

SELECT 
date,
channelGrouping AS channel,
sum(totals.visits) AS visits,
CASE WHEN sum(totals.visits) > 0
  THEN sum(totals.transactions)/sum(totals.visits) 
  ELSE 0 END AS con_rate,
sum(totals.transactions) AS transactions,
sum(totals.transactionRevenue) AS revenue,
sum(totals.transactionRevenue) / sum(totals.transactions) AS aov,
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
WHERE channelGrouping IN ('Organic Search','Direct')
GROUP BY date, channel
ORDER BY transactions DESC
LIMIT 1000


-- Using GROUP BY in BigQuery to aggregate metrics

SELECT 
date,
channelGrouping AS channel,
sum(totals.visits) AS visits,
sum(totals.transactions) AS transactions,
sum(totals.transactionRevenue) AS revenue
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
WHERE channelGrouping IN ('Organic Search','Direct')
GROUP BY date, channel
ORDER BY transactions DESC
LIMIT 1000

-- Aggregate by day, week and month in BigQuery / nest query

SELECT
date,
EXTRACT(DAY from date) AS date_of_month,
EXTRACT(WEEK from date) AS week_of_year,
FORMAT_DATE("%Y-%m", date) AS yyyymm

FROM (

  SELECT 
  PARSE_DATE("%Y%m%d", date) date,
  channelGrouping,
  totals.visits
  FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
  WHERE channelGrouping in ('Organic Search', 'Direct')
  ORDER BY totals.visits
  LIMIT 1000
)

-- Unnesting RECORD arrays in BigQuery SQL

SELECT 
date,
channelGrouping,
isEntrance,
-- originally nested as "hits.isEntrance"
page.pagePath,
totals.transactions,
totals.transactionRevenue
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
CROSS JOIN UNNEST (hits)
WHERE isEntrance = true

-- Joining tables in BigQuery SQL

SELECT  

zip.state_code,
sum(census.population) population

FROM `bigquery-public-data.census_bureau_usa.population_by_zip_2010` census 
LEFT JOIN `bigquery-public-data.geo_us_boundaries.zip_codes` zip
ON (
    census.zipcode = zip.zip_code
)

WHERE census.minimum_age IS NULL
AND census.maximum_age IS NULL
AND census.gender IS NULL

GROUP BY state_code
ORDER BY state_code

LIMIT 1000


-- WITH statements in BigQuery SQL

WITH census AS (
SELECT  
zipcode,
population
FROM `bigquery-public-data.census_bureau_usa.population_by_zip_2010` 
WHERE minimum_age IS NULL
AND maximum_age IS NULL
AND gender IS NULL
),

zip AS (
SELECT  
zip_code,
state_code
FROM `bigquery-public-data.geo_us_boundaries.zip_codes` 
)

SELECT 
zip.state_code,
sum(census.population)population
FROM census
LEFT JOIN zip
ON (
census.zipcode = zip.zip_code
)

GROUP BY state_code
ORDER BY state_code ASC

--Using analytic (window) functions in BigQuery

SELECT
date,
channelGrouping,
pageviews,
pageviews / sum(pageviews) over w1 AS pct_of_pageviews,
avg(pageviews) OVER w1 AS avg_pageviews

FROM (
SELECT
date,
channelGrouping,
sum(totals.pageViews) AS pageviews
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`
GROUP BY channelGrouping, date
)
WINDOW w1 AS (PARTITION BY date)
ORDER BY pct_of_pageviews DESC

-- Deduping query results in BigQuery

SELECT * FROM (

SELECT
date,
channelGrouping,
totals.hits,
visitStartTime,
first_value(visitStartTime) OVER (PARTITION BY channelGrouping ORDER BY visitStartTime desc) last_value
FROM `bigquery-public-data.google_analytics_sample.ga_sessions_20170801`

)

WHERE visitStartTime = last_value
ORDER BY channelGrouping ASC



